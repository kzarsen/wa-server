const fs = require('fs');
const qrcode = require('qrcode');
const express = require('express');
const { Client, LocalAuth } = require('whatsapp-web.js');
const axios = require('axios');

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

const SESSION_DIR = './.wwebjs_auth';

const client = new Client({
  authStrategy: new LocalAuth({ dataPath: SESSION_DIR }),
  puppeteer: {
    headless: true,
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage',
      '--disable-accelerated-2d-canvas',
      '--no-first-run',
      '--no-zygote',
      '--single-process',
      '--disable-gpu'
    ]
  }
});

let qrCodeData = '';
let isReady = false;
let messageLog = [];

function logMessage({ direction, text, from, to }) {
  messageLog.unshift({
    direction,
    text,
    from,
    to,
    time: new Date().toLocaleString()
  });
  if (messageLog.length > 100) messageLog = messageLog.slice(0, 100);
}

function extractText(msg) {
  if (msg.body && typeof msg.body === 'string' && msg.body.trim().length > 0) {
    return msg.body;
  }

  if (msg.hasMedia && msg.caption) {
    return msg.caption;
  }

  if (msg.type === 'image') return '[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ]';
  if (msg.type === 'video') return '[–í–∏–¥–µ–æ]';
  if (msg.type === 'sticker') return '[–°—Ç–∏–∫–µ—Ä]';
  if (msg.type === 'document') return msg.filename || '[–î–æ–∫—É–º–µ–Ω—Ç]';
  if (msg.type === 'reaction') return `[–†–µ–∞–∫—Ü–∏—è: ${msg.body}]`;

  return '[–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]';
}

client.on('qr', async (qr) => {
  qrCodeData = await qrcode.toDataURL(qr);
  console.log('üì± QR-–∫–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ /');
});

client.on('ready', () => {
  console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á—ë–Ω');
  isReady = true;
});

client.on('disconnected', async (reason) => {
  console.warn('‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:', reason);
  isReady = false;

  try {
    await axios.post('https://primary-production-458a9.up.railway.app/webhook/wa-disconnected-alert', {
      event: 'whatsapp_disconnected',
      time: new Date().toISOString()
    });
    console.log('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ n8n');
  } catch (err) {
    console.error('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ n8n:', err.message);
  }

  setTimeout(() => {
    console.log('üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
    client.initialize();
  }, 10000);
});

client.on('message', async (msg) => {
  try {
    const contact = await msg.getContact();
    const sender = contact.number || msg.from || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const text = extractText(msg);

    logMessage({ direction: 'IN', from: sender, text });
    console.log(`üì• –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${sender}: ${text}`);

    try {
      await axios.post('https://primary-production-458a9.up.railway.app/webhook/whatsapp-reply-hook', {
        destination: sender,
        message: text
      });
    } catch (err) {
      console.error('‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ n8n:', err.message);
    }

    try {
      await axios.post('https://primary-production-458a9.up.railway.app/webhook/gpt-whatsapp-agent', {
        destination: sender,
        message: text
      });
      console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ GPT-–±–æ—Ç–∞');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ GPT-–±–æ—Ç–∞:', err.message);
    }

  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
  }
});

app.get('/', (_, res) => {
  const html = `
  <html>
  <head>
    <title>WA-—Å–µ—Ä–≤–µ—Ä</title>
    <style>
      body { font-family: sans-serif; padding: 20px; background: #f9f9f9; color: #333; }
      h1 { color: #1e90ff; }
      .qr { margin-bottom: 20px; }
      table { width: 100%; border-collapse: collapse; margin-top: 20px; }
      th, td { border: 1px solid #ccc; padding: 8px; text-align: left; font-size: 14px; }
      th { background: #eee; }
      .in { color: green; }
      .out { color: blue; }
      .offline { color: red; }
      .status { font-weight: bold; margin-bottom: 10px; }
    </style>
  </head>
  <body>
    <h1>üì° Arcanum WA-—Å–µ—Ä–≤–µ—Ä</h1>
    <div class="status">–°—Ç–∞—Ç—É—Å: <span class="${isReady ? 'online' : 'offline'}">${isReady ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω'}</span></div>

    ${qrCodeData ? `<div class="qr"><img src="${qrCodeData}" width="250" /></div>` : '<p>‚è≥ QR-–∫–æ–¥ –µ—â—ë –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω...</p>'}

    <h2>üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏</h2>
    <ol>
      <li>–û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–±–æ—á–∏–π WhatsApp –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ</li>
      <li>–ó–∞–π–¥–∏—Ç–µ –≤ <strong>–ú–µ–Ω—é ‚Üí –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</strong></li>
      <li>–ù–∞–∂–º–∏—Ç–µ <strong>–ü—Ä–∏–≤—è–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</strong></li>
      <li>–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ</li>
    </ol>
    <p>–ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ç–∞—Ç—É—Å–∞ <strong>üü¢ –û–Ω–ª–∞–π–Ω</strong>.</p>

    <h2>üìë –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</h2>
    <table>
      <thead><tr><th>–¢–∏–ø</th><th>–û—Ç/–ö–æ–º—É</th><th>–¢–µ–∫—Å—Ç</th><th>–í—Ä–µ–º—è</th></tr></thead>
      <tbody>
        ${messageLog.slice(0, 20).map(msg => `
          <tr>
            <td class="\${msg.direction === 'IN' ? 'in' : 'out'}">\${msg.direction}</td>
            <td>\${msg.from || msg.to}</td>
            <td>\${msg.text}</td>
            <td>\${msg.time}</td>
          </tr>
        `).join('')}
      </tbody>
    </table>
  </body>
  </html>
  `;
  res.send(html);
});

app.post('/send', async (req, res) => {
  const { phone, text } = req.body;

  if (!phone || !text) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' });
  }

  if (!isReady || !client.info || !client.info.wid) {
    return res.status(503).json({ error: 'WhatsApp –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω' });
  }

  try {
    const chatId = `${phone}@c.us`;
    const chat = await client.getChatById(chatId);
    await chat.sendMessage(text);

    logMessage({ direction: 'OUT', to: phone, text });
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞', phone, ':', text);
    res.json({ status: 'ok', message: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', details: err.message });
  }
});

app.post('/restart', async (_, res) => {
  try {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WA –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É...');
    isReady = false;
    await client.destroy();
    client.initialize();
    res.json({ status: 'ok', message: '–ö–ª–∏–µ–Ω—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:', err.message);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞', details: err.message });
  }
});

process.on('SIGINT', async () => {
  console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  await client.destroy();
  process.exit(0);
});

client.initialize();

const PORT = process.env.PORT || 3000;
app.get('/status', (_, res) => {
  res.json({ status: isReady ? 'online' : 'offline' });
});
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
"""

# Save to file
file_path = Path("/mnt/data/index-gpt-updated.js")
file_path.write_text(updated_code.strip(), encoding="utf-8")
file_path.name
